{"ast":null,"code":"// import axios from 'axios';\n\n// // Create a custom Axios instance\n// const axiosInstance = axios.create({\n//     baseURL: 'http://localhost:8080/api', // Set your base URL here\n//     withCredentials: true, // Include credentials like cookies in requests\n// });\n\n// // Add an interceptor to handle HTTP errors\n// axiosInstance.interceptors.response.use(\n//     response => response, // Pass through the response if no errors\n//     error => {\n//         let message = 'خطای غیرمنتظره رخ داد.'; // Default error message\n\n//         // Check if the error response is available (HTTP status code errors)\n//         if (error.response) {\n//             const { status, data } = error.response;\n\n//             // If a message is present in the server's response, use it\n//             message = data.message || message;\n\n//             // Handle specific HTTP status codes\n//             switch (status) {\n//                 case 400:\n//                     message = data.message || 'درخواست اشتباه ارسال شده است.';\n//                     break;\n//                 case 401:\n//                     message = data.message || 'لطفاً وارد حساب کاربری خود شوید.';\n//                     break;\n//                 case 403:\n//                     message = data.message || 'دسترسی محدود است.';\n//                     break;\n//                 case 404:\n//                     message = data.message || 'صفحه مورد نظر یافت نشد.';\n//                     break;\n//                 case 409:\n//                     message = data.message || 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\n//                     break;\n//                 case 422:\n//                     message = data.message || 'داده‌های ورودی معتبر نیستند.';\n//                     break;\n//                 case 429:\n//                     message = data.message || 'Too many requests, please try again later.';\n//                     break;\n//                 case 500:\n//                     message = data.message || 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\n//                     break;\n//                 case 502:\n//                     message = data.message || 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\n//                     break;\n//                 case 503:\n//                     message = data.message || 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\n//                     break;\n//                 default:\n//                     message = data.message || 'خطای غیرمنتظره رخ داد.';\n//                     break;\n//             }\n//         }\n//         // If no response (network errors, server down, etc.)\n//         else if (error.request) {\n//             message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\n//         }\n//         // If something went wrong during request setup\n//         else if (error.config) {\n//             message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\n//         }\n//         // If the error is related to Axios itself (e.g., timeout, invalid URL)\n//         else if (error.message) {\n//             message = error.message || 'خطای غیرمنتظره رخ داد.';\n//         }\n\n//         // Optionally, you can show a notification, log the error, or perform other actions here\n//         console.error(message);  // Log the error message for debugging purposes\n\n//         // Return the error message to be displayed to the user\n//         // return Promise.reject(new Error(message));\n//         return Promise.reject({ message, error });\n//     }\n// );\n\n// export default axiosInstance;\n\n// import axios from 'axios';\n\n// // Create a custom Axios instance\n// const axiosInstance = axios.create({\n//     baseURL: 'http://localhost:8080/api', // Base API URL\n//     withCredentials: true, // Include cookies with requests\n// });\n\n// // Helper function to retrieve CSRF token via a GET request\n// const getCsrfTokenFromApi = async () => {\n//     try {\n//         const response = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\n//         return response.data.csrfToken; // Assuming the server returns the CSRF token in the `csrfToken` field\n//     } catch (error) {\n//         console.error('Error fetching CSRF token:', error);\n//         return null;\n//     }\n// };\n\n// const csrfToken = await getCsrfTokenFromApi();\n// // Request interceptor to add CSRF token to headers\n// axiosInstance.interceptors.request.use(\n//     async (config) => {\n//         console.log('Sending CSRF Token:', csrfToken);\n//         if (csrfToken) {\n//             config.headers['csrf-token'] = csrfToken; // Add CSRF token to headers\n//         }\n//         return config;\n//     },\n//     (error) => {\n//         // Handle request setup errors\n//         return Promise.reject(error);\n//     }\n// );\n\n// axiosInstance.interceptors.response.use(\n//     (response) => response,\n//     async (error) => {\n//         const originalRequest = error.config;\n\n//         let message = 'خطای غیرمنتظره رخ داد.';\n\n//         if (error.response) {\n//             const { status, data } = error.response;\n\n//             message = data.message || message;\n\n//             switch (status) {\n//                 case 400:\n//                     message = 'درخواست اشتباه ارسال شده است.';\n//                     break;\n//                 case 401:\n//                     message = 'لطفاً وارد حساب کاربری خود شوید.';\n//                     break;\n//                     // case 403:\n//                     // Attempt to refresh CSRF token and retry the request\n//                     if (!originalRequest._retry) {\n//                         originalRequest._retry = true; // Mark request as retried\n//                         try {\n//                             // Fetch new CSRF token\n//                             const csrfResponse = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\n//                             const newCsrfToken = csrfResponse.data.csrfToken;\n\n//                             // Add new token to original request headers\n//                             if (newCsrfToken) {\n//                                 originalRequest.headers['csrf-token'] = newCsrfToken;\n//                             }\n\n//                             // Retry the original request\n//                             return axiosInstance(originalRequest);\n//                         } catch (csrfError) {\n//                             console.error('Failed to refresh CSRF token:', csrfError);\n//                             message = 'دریافت توکن ناموفق بود. لطفاً دوباره تلاش کنید.';\n//                         }\n//                     } else {\n//                         message = 'دسترسی محدود است.';\n//                     }\n//                     break;\n//                 case 403:\n//                     message = '403.';\n//                 case 404:\n//                     message = 'صفحه مورد نظر یافت نشد.';\n//                     break;\n//                 case 409:\n//                     message = 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\n//                     break;\n//                 case 422:\n//                     message = 'داده‌های ورودی معتبر نیستند.';\n//                     break;\n//                 case 429:\n//                     message = 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\n//                     break;\n//                 case 500:\n//                     message = 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\n//                     break;\n//                 case 502:\n//                     message = 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\n//                     break;\n//                 case 503:\n//                     message = 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\n//                     break;\n//                 default:\n//                     message = 'خطای غیرمنتظره رخ داد.';\n//                     break;\n//             }\n//         }\n//         else if (error.request) {\n//             message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\n//         }\n//         else if (error.config) {\n//             message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\n//         }\n//         else if (error.message) {\n//             message = error.message;\n//         }\n\n//         console.error(message);\n\n//         return Promise.reject({ message, error });\n//     }\n// );\n\n// export default axiosInstance;\n\nimport axios from 'axios';\n\n// Create a custom Axios instance\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  // Base API URL\n  withCredentials: true // Include cookies with requests\n});\n\n// Helper function to retrieve CSRF token from cookies\nconst getCsrfTokenFromCookies = () => {\n  const csrfCookie = document.cookie.split('; ').find(row => row.startsWith('_csrf'));\n  return csrfCookie ? csrfCookie.split('=')[1] : null;\n};\n\n// Request interceptor to add CSRF token to headers\naxiosInstance.interceptors.request.use(config => {\n  const csrfToken = getCsrfTokenFromCookies();\n  console.log('Sending CSRF Token:', csrfToken);\n  if (csrfToken) {\n    config.headers['csrf-token'] = csrfToken; // Add CSRF token to headers\n  }\n  return config;\n}, error => {\n  // Handle request setup errors\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  let message = 'خطای غیرمنتظره رخ داد.';\n  if (error.response) {\n    const {\n      status,\n      data\n    } = error.response;\n    message = error.response.data.message || data.message;\n    switch (status) {\n      case 400:\n        message = error.response.data.message || 'درخواست اشتباه ارسال شده است.';\n        break;\n      case 401:\n        message = error.response.data.message || 'لطفاً وارد حساب کاربری خود شوید.';\n        break;\n        // case 403:\n        // Attempt to refresh CSRF token and retry the request\n        if (!originalRequest._retry) {\n          originalRequest._retry = true; // Mark request as retried\n          try {\n            // Fetch new CSRF token\n            const csrfResponse = await axios.get('http://localhost:8080/api/csrf-token', {\n              withCredentials: true\n            });\n            const newCsrfToken = csrfResponse.data.csrfToken;\n\n            // Add new token to original request headers\n            if (newCsrfToken) {\n              originalRequest.headers['x-csrf-token'] = newCsrfToken;\n            }\n\n            // Retry the original request\n            return axiosInstance(originalRequest);\n          } catch (csrfError) {\n            console.error('Failed to refresh CSRF token:', csrfError);\n            message = 'دریافت توکن ناموفق بود. لطفاً دوباره تلاش کنید.';\n          }\n        } else {\n          message = 'دسترسی محدود است.';\n        }\n        break;\n      case 403:\n        message = error.response.data.message || '403.';\n      case 404:\n        message = error.response.data.message || 'صفحه مورد نظر یافت نشد.';\n        break;\n      case 409:\n        message = error.response.data.message || 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\n        break;\n      case 422:\n        message = error.response.data.message || 'داده‌های ورودی معتبر نیستند.';\n        break;\n      case 429:\n        message = error.response.data.message || 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\n        break;\n      case 500:\n        message = error.response.data.message || 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\n        break;\n      case 502:\n        message = error.response.data.message || 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\n        break;\n      case 503:\n        message = error.response.data.message || 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\n        break;\n      default:\n        message = error.response.data.message || 'خطای غیرمنتظره رخ داد.';\n        break;\n    }\n  } else if (error.request) {\n    message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\n  } else if (error.config) {\n    message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\n  } else if (error.message) {\n    message = error.message;\n  }\n  console.error(message);\n  return Promise.reject({\n    message,\n    error\n  });\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","withCredentials","getCsrfTokenFromCookies","csrfCookie","document","cookie","split","find","row","startsWith","interceptors","request","use","config","csrfToken","console","log","headers","error","Promise","reject","response","originalRequest","message","status","data","_retry","csrfResponse","get","newCsrfToken","csrfError"],"sources":["C:/Users/computer/Desktop/templates/shop/client/src/Helper/apiInterceptors.js"],"sourcesContent":["// import axios from 'axios';\r\n\r\n// // Create a custom Axios instance\r\n// const axiosInstance = axios.create({\r\n//     baseURL: 'http://localhost:8080/api', // Set your base URL here\r\n//     withCredentials: true, // Include credentials like cookies in requests\r\n// });\r\n\r\n// // Add an interceptor to handle HTTP errors\r\n// axiosInstance.interceptors.response.use(\r\n//     response => response, // Pass through the response if no errors\r\n//     error => {\r\n//         let message = 'خطای غیرمنتظره رخ داد.'; // Default error message\r\n\r\n//         // Check if the error response is available (HTTP status code errors)\r\n//         if (error.response) {\r\n//             const { status, data } = error.response;\r\n\r\n//             // If a message is present in the server's response, use it\r\n//             message = data.message || message;\r\n\r\n//             // Handle specific HTTP status codes\r\n//             switch (status) {\r\n//                 case 400:\r\n//                     message = data.message || 'درخواست اشتباه ارسال شده است.';\r\n//                     break;\r\n//                 case 401:\r\n//                     message = data.message || 'لطفاً وارد حساب کاربری خود شوید.';\r\n//                     break;\r\n//                 case 403:\r\n//                     message = data.message || 'دسترسی محدود است.';\r\n//                     break;\r\n//                 case 404:\r\n//                     message = data.message || 'صفحه مورد نظر یافت نشد.';\r\n//                     break;\r\n//                 case 409:\r\n//                     message = data.message || 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\r\n//                     break;\r\n//                 case 422:\r\n//                     message = data.message || 'داده‌های ورودی معتبر نیستند.';\r\n//                     break;\r\n//                 case 429:\r\n//                     message = data.message || 'Too many requests, please try again later.';\r\n//                     break;\r\n//                 case 500:\r\n//                     message = data.message || 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 case 502:\r\n//                     message = data.message || 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 case 503:\r\n//                     message = data.message || 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 default:\r\n//                     message = data.message || 'خطای غیرمنتظره رخ داد.';\r\n//                     break;\r\n//             }\r\n//         }\r\n//         // If no response (network errors, server down, etc.)\r\n//         else if (error.request) {\r\n//             message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\r\n//         }\r\n//         // If something went wrong during request setup\r\n//         else if (error.config) {\r\n//             message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\r\n//         }\r\n//         // If the error is related to Axios itself (e.g., timeout, invalid URL)\r\n//         else if (error.message) {\r\n//             message = error.message || 'خطای غیرمنتظره رخ داد.';\r\n//         }\r\n\r\n//         // Optionally, you can show a notification, log the error, or perform other actions here\r\n//         console.error(message);  // Log the error message for debugging purposes\r\n\r\n//         // Return the error message to be displayed to the user\r\n//         // return Promise.reject(new Error(message));\r\n//         return Promise.reject({ message, error });\r\n//     }\r\n// );\r\n\r\n// export default axiosInstance;\r\n\r\n\r\n// import axios from 'axios';\r\n\r\n// // Create a custom Axios instance\r\n// const axiosInstance = axios.create({\r\n//     baseURL: 'http://localhost:8080/api', // Base API URL\r\n//     withCredentials: true, // Include cookies with requests\r\n// });\r\n\r\n// // Helper function to retrieve CSRF token via a GET request\r\n// const getCsrfTokenFromApi = async () => {\r\n//     try {\r\n//         const response = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\r\n//         return response.data.csrfToken; // Assuming the server returns the CSRF token in the `csrfToken` field\r\n//     } catch (error) {\r\n//         console.error('Error fetching CSRF token:', error);\r\n//         return null;\r\n//     }\r\n// };\r\n\r\n// const csrfToken = await getCsrfTokenFromApi();\r\n// // Request interceptor to add CSRF token to headers\r\n// axiosInstance.interceptors.request.use(\r\n//     async (config) => {\r\n//         console.log('Sending CSRF Token:', csrfToken);\r\n//         if (csrfToken) {\r\n//             config.headers['csrf-token'] = csrfToken; // Add CSRF token to headers\r\n//         }\r\n//         return config;\r\n//     },\r\n//     (error) => {\r\n//         // Handle request setup errors\r\n//         return Promise.reject(error);\r\n//     }\r\n// );\r\n\r\n// axiosInstance.interceptors.response.use(\r\n//     (response) => response,\r\n//     async (error) => {\r\n//         const originalRequest = error.config;\r\n\r\n//         let message = 'خطای غیرمنتظره رخ داد.';\r\n\r\n//         if (error.response) {\r\n//             const { status, data } = error.response;\r\n\r\n//             message = data.message || message;\r\n\r\n//             switch (status) {\r\n//                 case 400:\r\n//                     message = 'درخواست اشتباه ارسال شده است.';\r\n//                     break;\r\n//                 case 401:\r\n//                     message = 'لطفاً وارد حساب کاربری خود شوید.';\r\n//                     break;\r\n//                     // case 403:\r\n//                     // Attempt to refresh CSRF token and retry the request\r\n//                     if (!originalRequest._retry) {\r\n//                         originalRequest._retry = true; // Mark request as retried\r\n//                         try {\r\n//                             // Fetch new CSRF token\r\n//                             const csrfResponse = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\r\n//                             const newCsrfToken = csrfResponse.data.csrfToken;\r\n\r\n//                             // Add new token to original request headers\r\n//                             if (newCsrfToken) {\r\n//                                 originalRequest.headers['csrf-token'] = newCsrfToken;\r\n//                             }\r\n\r\n//                             // Retry the original request\r\n//                             return axiosInstance(originalRequest);\r\n//                         } catch (csrfError) {\r\n//                             console.error('Failed to refresh CSRF token:', csrfError);\r\n//                             message = 'دریافت توکن ناموفق بود. لطفاً دوباره تلاش کنید.';\r\n//                         }\r\n//                     } else {\r\n//                         message = 'دسترسی محدود است.';\r\n//                     }\r\n//                     break;\r\n//                 case 403:\r\n//                     message = '403.';\r\n//                 case 404:\r\n//                     message = 'صفحه مورد نظر یافت نشد.';\r\n//                     break;\r\n//                 case 409:\r\n//                     message = 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\r\n//                     break;\r\n//                 case 422:\r\n//                     message = 'داده‌های ورودی معتبر نیستند.';\r\n//                     break;\r\n//                 case 429:\r\n//                     message = 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\r\n//                     break;\r\n//                 case 500:\r\n//                     message = 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 case 502:\r\n//                     message = 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 case 503:\r\n//                     message = 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 default:\r\n//                     message = 'خطای غیرمنتظره رخ داد.';\r\n//                     break;\r\n//             }\r\n//         }\r\n//         else if (error.request) {\r\n//             message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\r\n//         }\r\n//         else if (error.config) {\r\n//             message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\r\n//         }\r\n//         else if (error.message) {\r\n//             message = error.message;\r\n//         }\r\n\r\n//         console.error(message);\r\n\r\n//         return Promise.reject({ message, error });\r\n//     }\r\n// );\r\n\r\n// export default axiosInstance;\r\n\r\n\r\nimport axios from 'axios';\r\n\r\n// Create a custom Axios instance\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://localhost:8080/api', // Base API URL\r\n    withCredentials: true, // Include cookies with requests\r\n});\r\n\r\n// Helper function to retrieve CSRF token from cookies\r\nconst getCsrfTokenFromCookies = () => {\r\n    const csrfCookie = document.cookie.split('; ').find(row => row.startsWith('_csrf'));\r\n    return csrfCookie ? csrfCookie.split('=')[1] : null;\r\n};\r\n\r\n// Request interceptor to add CSRF token to headers\r\naxiosInstance.interceptors.request.use(\r\n    (config) => {\r\n        const csrfToken = getCsrfTokenFromCookies();\r\n        console.log('Sending CSRF Token:', csrfToken);\r\n        if (csrfToken) {\r\n            config.headers['csrf-token'] = csrfToken; // Add CSRF token to headers\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        // Handle request setup errors\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        let message = 'خطای غیرمنتظره رخ داد.';\r\n\r\n        if (error.response) {\r\n            const { status, data } = error.response;\r\n\r\n            message = error.response.data.message || data.message;\r\n\r\n            switch (status) {\r\n                case 400:\r\n                    message = error.response.data.message || 'درخواست اشتباه ارسال شده است.';\r\n                    break;\r\n                case 401:\r\n                    message = error.response.data.message || 'لطفاً وارد حساب کاربری خود شوید.';\r\n                    break;\r\n                    // case 403:\r\n                    // Attempt to refresh CSRF token and retry the request\r\n                    if (!originalRequest._retry) {\r\n                        originalRequest._retry = true; // Mark request as retried\r\n                        try {\r\n                            // Fetch new CSRF token\r\n                            const csrfResponse = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\r\n                            const newCsrfToken = csrfResponse.data.csrfToken;\r\n\r\n                            // Add new token to original request headers\r\n                            if (newCsrfToken) {\r\n                                originalRequest.headers['x-csrf-token'] = newCsrfToken;\r\n                            }\r\n\r\n                            // Retry the original request\r\n                            return axiosInstance(originalRequest);\r\n                        } catch (csrfError) {\r\n                            console.error('Failed to refresh CSRF token:', csrfError);\r\n                            message = 'دریافت توکن ناموفق بود. لطفاً دوباره تلاش کنید.';\r\n                        }\r\n                    } else {\r\n                        message = 'دسترسی محدود است.';\r\n                    }\r\n                    break;\r\n                case 403:\r\n                    message = error.response.data.message || '403.';\r\n                case 404:\r\n                    message = error.response.data.message || 'صفحه مورد نظر یافت نشد.';\r\n                    break;\r\n                case 409:\r\n                    message = error.response.data.message || 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\r\n                    break;\r\n                case 422:\r\n                    message = error.response.data.message || 'داده‌های ورودی معتبر نیستند.';\r\n                    break;\r\n                case 429:\r\n                    message = error.response.data.message || 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\r\n                    break;\r\n                case 500:\r\n                    message = error.response.data.message || 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\r\n                    break;\r\n                case 502:\r\n                    message = error.response.data.message || 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\r\n                    break;\r\n                case 503:\r\n                    message = error.response.data.message || 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\r\n                    break;\r\n                default:\r\n                    message = error.response.data.message || 'خطای غیرمنتظره رخ داد.';\r\n                    break;\r\n            }\r\n        }\r\n        else if (error.request) {\r\n            message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\r\n        }\r\n        else if (error.config) {\r\n            message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\r\n        }\r\n        else if (error.message) {\r\n            message = error.message;\r\n        }\r\n\r\n        console.error(message);\r\n\r\n        return Promise.reject({ message, error });\r\n    }\r\n);\r\n\r\nexport default axiosInstance;"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC/BC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,eAAe,EAAE,IAAI,CAAE;AAC3B,CAAC,CAAC;;AAEF;AACA,MAAMC,uBAAuB,GAAGA,CAAA,KAAM;EAClC,MAAMC,UAAU,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,IAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}