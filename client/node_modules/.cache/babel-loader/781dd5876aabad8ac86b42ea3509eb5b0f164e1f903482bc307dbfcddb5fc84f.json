{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\computer\\\\Desktop\\\\templates\\\\shop\\\\client\\\\src\\\\Context\\\\CsrfTokenProvider .js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { getCsrfToken } from '../Helper/getCsrfToken ';\n\n// Create a Context for CSRF Token\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CsrfTokenContext = /*#__PURE__*/createContext();\n\n// Custom hook to use CSRF Token context\nexport const useCsrfToken = () => {\n  _s();\n  return useContext(CsrfTokenContext);\n};\n\n// Provider component to wrap your app\n_s(useCsrfToken, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const CsrfTokenProvider = ({\n  children\n}) => {\n  _s2();\n  const [csrfToken, setCsrfToken] = useState('');\n  useEffect(() => {\n    const fetchToken = async () => {\n      setCsrfToken(await getCsrfToken);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CsrfTokenContext.Provider, {\n    value: csrfToken,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n};\n_s2(CsrfTokenProvider, \"oGJDfbo+++skzJE6J07w8jLe9PI=\");\n_c = CsrfTokenProvider;\nvar _c;\n$RefreshReg$(_c, \"CsrfTokenProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","getCsrfToken","jsxDEV","_jsxDEV","CsrfTokenContext","useCsrfToken","_s","CsrfTokenProvider","children","_s2","csrfToken","setCsrfToken","fetchToken","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/computer/Desktop/templates/shop/client/src/Context/CsrfTokenProvider .js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { getCsrfToken } from '../Helper/getCsrfToken ';\r\n\r\n// Create a Context for CSRF Token\r\nconst CsrfTokenContext = createContext();\r\n\r\n// Custom hook to use CSRF Token context\r\nexport const useCsrfToken = () => {\r\n    return useContext(CsrfTokenContext);\r\n};\r\n\r\n// Provider component to wrap your app\r\nexport const CsrfTokenProvider = ({ children }) => {\r\n    const [csrfToken, setCsrfToken] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchToken = async () => {\r\n            setCsrfToken(await getCsrfToken)\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <CsrfTokenContext.Provider value={csrfToken}>\r\n            {children}\r\n        </CsrfTokenContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,yBAAyB;;AAEtD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,gBAAgB,gBAAGR,aAAa,CAAC,CAAC;;AAExC;AACA,OAAO,MAAMS,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,OAAOT,UAAU,CAACO,gBAAgB,CAAC;AACvC,CAAC;;AAED;AAAAE,EAAA,CAJaD,YAAY;AAKzB,OAAO,MAAME,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC/C,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACZ,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC3BD,YAAY,CAAC,MAAMV,YAAY,CAAC;IACpC,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIE,OAAA,CAACC,gBAAgB,CAACS,QAAQ;IAACC,KAAK,EAAEJ,SAAU;IAAAF,QAAA,EACvCA;EAAQ;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACc,CAAC;AAEpC,CAAC;AAACT,GAAA,CAdWF,iBAAiB;AAAAY,EAAA,GAAjBZ,iBAAiB;AAAA,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}