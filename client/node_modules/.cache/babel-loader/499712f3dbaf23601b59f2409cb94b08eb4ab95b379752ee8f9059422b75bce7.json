{"ast":null,"code":"// import axios from 'axios';\n\n// // Create a custom Axios instance\n// const axiosInstance = axios.create({\n//     baseURL: 'http://localhost:8080/api', // Set your base URL here\n//     withCredentials: true, // Include credentials like cookies in requests\n// });\n\n// // Add an interceptor to handle HTTP errors\n// axiosInstance.interceptors.response.use(\n//     response => response, // Pass through the response if no errors\n//     error => {\n//         let message = 'خطای غیرمنتظره رخ داد.'; // Default error message\n\n//         // Check if the error response is available (HTTP status code errors)\n//         if (error.response) {\n//             const { status, data } = error.response;\n\n//             // If a message is present in the server's response, use it\n//             message = data.message || message;\n\n//             // Handle specific HTTP status codes\n//             switch (status) {\n//                 case 400:\n//                     message = data.message || 'درخواست اشتباه ارسال شده است.';\n//                     break;\n//                 case 401:\n//                     message = data.message || 'لطفاً وارد حساب کاربری خود شوید.';\n//                     break;\n//                 case 403:\n//                     message = data.message || 'دسترسی محدود است.';\n//                     break;\n//                 case 404:\n//                     message = data.message || 'صفحه مورد نظر یافت نشد.';\n//                     break;\n//                 case 409:\n//                     message = data.message || 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\n//                     break;\n//                 case 422:\n//                     message = data.message || 'داده‌های ورودی معتبر نیستند.';\n//                     break;\n//                 case 429:\n//                     message = data.message || 'Too many requests, please try again later.';\n//                     break;\n//                 case 500:\n//                     message = data.message || 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\n//                     break;\n//                 case 502:\n//                     message = data.message || 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\n//                     break;\n//                 case 503:\n//                     message = data.message || 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\n//                     break;\n//                 default:\n//                     message = data.message || 'خطای غیرمنتظره رخ داد.';\n//                     break;\n//             }\n//         }\n//         // If no response (network errors, server down, etc.)\n//         else if (error.request) {\n//             message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\n//         }\n//         // If something went wrong during request setup\n//         else if (error.config) {\n//             message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\n//         }\n//         // If the error is related to Axios itself (e.g., timeout, invalid URL)\n//         else if (error.message) {\n//             message = error.message || 'خطای غیرمنتظره رخ داد.';\n//         }\n\n//         // Optionally, you can show a notification, log the error, or perform other actions here\n//         console.error(message);  // Log the error message for debugging purposes\n\n//         // Return the error message to be displayed to the user\n//         // return Promise.reject(new Error(message));\n//         return Promise.reject({ message, error });\n//     }\n// );\n\n// export default axiosInstance;\n\nimport axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  withCredentials: true\n});\nconst getCsrfTokenFromCookies = () => {\n  const csrfCookie = document.cookie.split('; ').find(row => row.startsWith('-csrf'));\n  return csrfCookie ? csrfCookie.split('=')[1] : null;\n};\naxiosInstance.interceptors.request.use(config => {\n  const csrfToken = getCsrfTokenFromCookies();\n  if (csrfToken) {\n    config.headers['csrf-token'] = csrfToken;\n  }\n  return config;\n}, error => {\n  // Handle request setup errors\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(response => response, error => {\n  let message = 'خطای غیرمنتظره رخ داد.';\n\n  // Check if the error response is available (HTTP status code errors)\n  if (error.response) {\n    const {\n      status,\n      data\n    } = error.response;\n\n    // If a message is present in the server's response, use it\n    message = data.message || message;\n\n    // Handle specific HTTP status codes\n    switch (status) {\n      case 400:\n        message = 'درخواست اشتباه ارسال شده است.';\n        break;\n      case 401:\n        message = 'لطفاً وارد حساب کاربری خود شوید.';\n        break;\n      case 403:\n        message = 'دسترسی محدود است.';\n        break;\n      case 404:\n        message = 'صفحه مورد نظر یافت نشد.';\n        break;\n      case 409:\n        message = 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\n        break;\n      case 422:\n        message = 'داده‌های ورودی معتبر نیستند.';\n        break;\n      case 429:\n        message = 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\n        break;\n      case 500:\n        message = 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\n        break;\n      case 502:\n        message = 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\n        break;\n      case 503:\n        message = 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\n        break;\n      default:\n        message = 'خطای غیرمنتظره رخ داد.';\n        break;\n    }\n  }\n  // If no response (network errors, server down, etc.)\n  else if (error.request) {\n    message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\n  }\n  // If something went wrong during request setup\n  else if (error.config) {\n    message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\n  }\n  // If the error is related to Axios itself (e.g., timeout, invalid URL)\n  else if (error.message) {\n    message = error.message;\n  }\n\n  // Optionally log the error message for debugging purposes\n  console.error(message);\n\n  // Return the error message to be displayed to the user\n  return Promise.reject({\n    message,\n    error\n  });\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","withCredentials","getCsrfTokenFromCookies","csrfCookie","document","cookie","split","find","row","startsWith","interceptors","request","use","config","csrfToken","headers","error","Promise","reject","response","message","status","data","console"],"sources":["C:/Users/computer/Desktop/templates/shop/client/src/Helper/apiInterceptors.js"],"sourcesContent":["// import axios from 'axios';\r\n\r\n// // Create a custom Axios instance\r\n// const axiosInstance = axios.create({\r\n//     baseURL: 'http://localhost:8080/api', // Set your base URL here\r\n//     withCredentials: true, // Include credentials like cookies in requests\r\n// });\r\n\r\n// // Add an interceptor to handle HTTP errors\r\n// axiosInstance.interceptors.response.use(\r\n//     response => response, // Pass through the response if no errors\r\n//     error => {\r\n//         let message = 'خطای غیرمنتظره رخ داد.'; // Default error message\r\n\r\n//         // Check if the error response is available (HTTP status code errors)\r\n//         if (error.response) {\r\n//             const { status, data } = error.response;\r\n\r\n//             // If a message is present in the server's response, use it\r\n//             message = data.message || message;\r\n\r\n//             // Handle specific HTTP status codes\r\n//             switch (status) {\r\n//                 case 400:\r\n//                     message = data.message || 'درخواست اشتباه ارسال شده است.';\r\n//                     break;\r\n//                 case 401:\r\n//                     message = data.message || 'لطفاً وارد حساب کاربری خود شوید.';\r\n//                     break;\r\n//                 case 403:\r\n//                     message = data.message || 'دسترسی محدود است.';\r\n//                     break;\r\n//                 case 404:\r\n//                     message = data.message || 'صفحه مورد نظر یافت نشد.';\r\n//                     break;\r\n//                 case 409:\r\n//                     message = data.message || 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\r\n//                     break;\r\n//                 case 422:\r\n//                     message = data.message || 'داده‌های ورودی معتبر نیستند.';\r\n//                     break;\r\n//                 case 429:\r\n//                     message = data.message || 'Too many requests, please try again later.';\r\n//                     break;\r\n//                 case 500:\r\n//                     message = data.message || 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 case 502:\r\n//                     message = data.message || 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 case 503:\r\n//                     message = data.message || 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 default:\r\n//                     message = data.message || 'خطای غیرمنتظره رخ داد.';\r\n//                     break;\r\n//             }\r\n//         }\r\n//         // If no response (network errors, server down, etc.)\r\n//         else if (error.request) {\r\n//             message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\r\n//         }\r\n//         // If something went wrong during request setup\r\n//         else if (error.config) {\r\n//             message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\r\n//         }\r\n//         // If the error is related to Axios itself (e.g., timeout, invalid URL)\r\n//         else if (error.message) {\r\n//             message = error.message || 'خطای غیرمنتظره رخ داد.';\r\n//         }\r\n\r\n//         // Optionally, you can show a notification, log the error, or perform other actions here\r\n//         console.error(message);  // Log the error message for debugging purposes\r\n\r\n//         // Return the error message to be displayed to the user\r\n//         // return Promise.reject(new Error(message));\r\n//         return Promise.reject({ message, error });\r\n//     }\r\n// );\r\n\r\n// export default axiosInstance;\r\n\r\n\r\nimport axios from 'axios';\r\n\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://localhost:8080/api',\r\n    withCredentials: true, \r\n});\r\n\r\n\r\nconst getCsrfTokenFromCookies = () => {\r\n    const csrfCookie = document.cookie.split('; ').find(row => row.startsWith('-csrf'));\r\n    return csrfCookie ? csrfCookie.split('=')[1] : null;\r\n};\r\n\r\n\r\naxiosInstance.interceptors.request.use(\r\n    (config) => {\r\n\r\n        const csrfToken = getCsrfTokenFromCookies();\r\n        if (csrfToken) {\r\n\r\n            config.headers['csrf-token'] = csrfToken;\r\n        }\r\n        return config;\r\n    },\r\n    (error) => {\r\n        // Handle request setup errors\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n\r\naxiosInstance.interceptors.response.use(\r\n\r\n    (response) => response,\r\n\r\n\r\n    (error) => {\r\n        let message = 'خطای غیرمنتظره رخ داد.'; \r\n\r\n        // Check if the error response is available (HTTP status code errors)\r\n        if (error.response) {\r\n            const { status, data } = error.response;\r\n\r\n            // If a message is present in the server's response, use it\r\n            message = data.message || message;\r\n\r\n            // Handle specific HTTP status codes\r\n            switch (status) {\r\n                case 400:\r\n                    message = 'درخواست اشتباه ارسال شده است.';\r\n                    break;\r\n                case 401:\r\n                    message = 'لطفاً وارد حساب کاربری خود شوید.';\r\n                    break;\r\n                case 403:\r\n                    message = 'دسترسی محدود است.';\r\n                    break;\r\n                case 404:\r\n                    message = 'صفحه مورد نظر یافت نشد.';\r\n                    break;\r\n                case 409:\r\n                    message = 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\r\n                    break;\r\n                case 422:\r\n                    message = 'داده‌های ورودی معتبر نیستند.';\r\n                    break;\r\n                case 429:\r\n                    message = 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\r\n                    break;\r\n                case 500:\r\n                    message = 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\r\n                    break;\r\n                case 502:\r\n                    message = 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\r\n                    break;\r\n                case 503:\r\n                    message = 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\r\n                    break;\r\n                default:\r\n                    message = 'خطای غیرمنتظره رخ داد.';\r\n                    break;\r\n            }\r\n        }\r\n        // If no response (network errors, server down, etc.)\r\n        else if (error.request) {\r\n            message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\r\n        }\r\n        // If something went wrong during request setup\r\n        else if (error.config) {\r\n            message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\r\n        }\r\n        // If the error is related to Axios itself (e.g., timeout, invalid URL)\r\n        else if (error.message) {\r\n            message = error.message;\r\n        }\r\n\r\n        // Optionally log the error message for debugging purposes\r\n        console.error(message);\r\n\r\n        // Return the error message to be displayed to the user\r\n        return Promise.reject({ message, error });\r\n    }\r\n);\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}