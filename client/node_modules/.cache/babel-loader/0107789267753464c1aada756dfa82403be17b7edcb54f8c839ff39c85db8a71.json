{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\computer\\\\Desktop\\\\templates\\\\shop\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { StrictMode, useEffect, useState } from 'react';\nimport './App.css';\nimport ColorContextProvider from './Context/ColorContextProvider';\nimport ProductContextProvider from './Context/ProductContextProvider';\nimport UserContextProvider from './Context/UserContextProvider';\nimport WebApp from './WebApp';\nimport ShippingContextProvider from './Context/ShippingCotextProvider';\nimport axios from 'axios';\n// Create a custom Axios instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const axiosInstanceTEST = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  // Base API URL\n  withCredentials: true // Include cookies with requests\n});\nfunction App() {\n  _s();\n  const [csrfToken, setCsrfToken] = useState();\n\n  // Helper function to retrieve CSRF token via a GET request\n  const getCsrfTokenFromApi = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/csrf-token', {\n        withCredentials: true\n      });\n      return response.data.csrfToken; // Assuming the server returns the CSRF token in the `csrfToken` field\n    } catch (error) {\n      console.error('Error fetching CSRF token:', error);\n      return null;\n    }\n  };\n\n  // Request interceptor to add CSRF token to headers\n  axiosInstance.interceptors.request.use(async config => {\n    console.log('Sending CSRF Token:', csrfToken);\n    if (csrfToken) {\n      config.headers['csrf-token'] = csrfToken; // Add CSRF token to headers\n    }\n    return config;\n  }, error => {\n    // Handle request setup errors\n    return Promise.reject(error);\n  });\n  axiosInstance.interceptors.response.use(response => response, async error => {\n    const originalRequest = error.config;\n    let message = 'خطای غیرمنتظره رخ داد.';\n    if (error.response) {\n      const {\n        status,\n        data\n      } = error.response;\n      message = data.message || message;\n      switch (status) {\n        case 400:\n          message = 'درخواست اشتباه ارسال شده است.';\n          break;\n        case 401:\n          message = 'لطفاً وارد حساب کاربری خود شوید.';\n          break;\n          // case 403:\n          // Attempt to refresh CSRF token and retry the request\n          if (!originalRequest._retry) {\n            originalRequest._retry = true; // Mark request as retried\n            try {\n              // Fetch new CSRF token\n              const csrfResponse = await axios.get('http://localhost:8080/api/csrf-token', {\n                withCredentials: true\n              });\n              const newCsrfToken = csrfResponse.data.csrfToken;\n\n              // Add new token to original request headers\n              if (newCsrfToken) {\n                originalRequest.headers['csrf-token'] = newCsrfToken;\n              }\n\n              // Retry the original request\n              return axiosInstance(originalRequest);\n            } catch (csrfError) {\n              console.error('Failed to refresh CSRF token:', csrfError);\n              message = 'دریافت توکن ناموفق بود. لطفاً دوباره تلاش کنید.';\n            }\n          } else {\n            message = 'دسترسی محدود است.';\n          }\n          break;\n        case 403:\n          message = '403.';\n        case 404:\n          message = 'صفحه مورد نظر یافت نشد.';\n          break;\n        case 409:\n          message = 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\n          break;\n        case 422:\n          message = 'داده‌های ورودی معتبر نیستند.';\n          break;\n        case 429:\n          message = 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\n          break;\n        case 500:\n          message = 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\n          break;\n        case 502:\n          message = 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\n          break;\n        case 503:\n          message = 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\n          break;\n        default:\n          message = 'خطای غیرمنتظره رخ داد.';\n          break;\n      }\n    } else if (error.request) {\n      message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\n    } else if (error.config) {\n      message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\n    } else if (error.message) {\n      message = error.message;\n    }\n    console.error(message);\n    return Promise.reject({\n      message,\n      error\n    });\n  });\n  useEffect(() => {\n    const fetchToken = async () => {\n      setCsrfToken(await getCsrfTokenFromApi());\n    };\n    fetchToken();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(UserContextProvider, {\n      children: /*#__PURE__*/_jsxDEV(ProductContextProvider, {\n        children: /*#__PURE__*/_jsxDEV(ShippingContextProvider, {\n          children: /*#__PURE__*/_jsxDEV(ColorContextProvider, {\n            children: /*#__PURE__*/_jsxDEV(WebApp, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AhS5G3lldUni1aNC21fWK6A9Bw0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["StrictMode","useEffect","useState","ColorContextProvider","ProductContextProvider","UserContextProvider","WebApp","ShippingContextProvider","axios","jsxDEV","_jsxDEV","axiosInstanceTEST","create","baseURL","withCredentials","App","_s","csrfToken","setCsrfToken","getCsrfTokenFromApi","response","get","data","error","console","axiosInstance","interceptors","request","use","config","log","headers","Promise","reject","originalRequest","message","status","_retry","csrfResponse","newCsrfToken","csrfError","fetchToken","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/computer/Desktop/templates/shop/client/src/App.js"],"sourcesContent":["import { StrictMode, useEffect, useState } from 'react';\nimport './App.css';\nimport ColorContextProvider from './Context/ColorContextProvider';\nimport ProductContextProvider from './Context/ProductContextProvider';\nimport UserContextProvider from './Context/UserContextProvider';\nimport WebApp from './WebApp';\nimport ShippingContextProvider from './Context/ShippingCotextProvider';\n\n\nimport axios from 'axios';\n// Create a custom Axios instance\nexport const axiosInstanceTEST = axios.create({\n  baseURL: 'http://localhost:8080/api', // Base API URL\n  withCredentials: true, // Include cookies with requests\n});\n\n\nfunction App() {\n\n\n  const [csrfToken, setCsrfToken] = useState()\n\n\n  // Helper function to retrieve CSRF token via a GET request\n  const getCsrfTokenFromApi = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\n      return response.data.csrfToken; // Assuming the server returns the CSRF token in the `csrfToken` field\n    } catch (error) {\n      console.error('Error fetching CSRF token:', error);\n      return null;\n    }\n  };\n\n  // Request interceptor to add CSRF token to headers\n  axiosInstance.interceptors.request.use(\n    async (config) => {\n      console.log('Sending CSRF Token:', csrfToken);\n      if (csrfToken) {\n        config.headers['csrf-token'] = csrfToken; // Add CSRF token to headers\n      }\n      return config;\n    },\n    (error) => {\n      // Handle request setup errors\n      return Promise.reject(error);\n    }\n  );\n\n  axiosInstance.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n      const originalRequest = error.config;\n\n      let message = 'خطای غیرمنتظره رخ داد.';\n\n      if (error.response) {\n        const { status, data } = error.response;\n\n        message = data.message || message;\n\n        switch (status) {\n          case 400:\n            message = 'درخواست اشتباه ارسال شده است.';\n            break;\n          case 401:\n            message = 'لطفاً وارد حساب کاربری خود شوید.';\n            break;\n            // case 403:\n            // Attempt to refresh CSRF token and retry the request\n            if (!originalRequest._retry) {\n              originalRequest._retry = true; // Mark request as retried\n              try {\n                // Fetch new CSRF token\n                const csrfResponse = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\n                const newCsrfToken = csrfResponse.data.csrfToken;\n\n                // Add new token to original request headers\n                if (newCsrfToken) {\n                  originalRequest.headers['csrf-token'] = newCsrfToken;\n                }\n\n                // Retry the original request\n                return axiosInstance(originalRequest);\n              } catch (csrfError) {\n                console.error('Failed to refresh CSRF token:', csrfError);\n                message = 'دریافت توکن ناموفق بود. لطفاً دوباره تلاش کنید.';\n              }\n            } else {\n              message = 'دسترسی محدود است.';\n            }\n            break;\n          case 403:\n            message = '403.';\n          case 404:\n            message = 'صفحه مورد نظر یافت نشد.';\n            break;\n          case 409:\n            message = 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\n            break;\n          case 422:\n            message = 'داده‌های ورودی معتبر نیستند.';\n            break;\n          case 429:\n            message = 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\n            break;\n          case 500:\n            message = 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\n            break;\n          case 502:\n            message = 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\n            break;\n          case 503:\n            message = 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\n            break;\n          default:\n            message = 'خطای غیرمنتظره رخ داد.';\n            break;\n        }\n      }\n      else if (error.request) {\n        message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\n      }\n      else if (error.config) {\n        message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\n      }\n      else if (error.message) {\n        message = error.message;\n      }\n\n      console.error(message);\n\n      return Promise.reject({ message, error });\n    }\n  );\n\n\n  useEffect(() => {\n    const fetchToken = async () => {\n      setCsrfToken(await getCsrfTokenFromApi())\n    }\n    fetchToken();\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {/* <StrictMode> */}\n      <UserContextProvider>\n        <ProductContextProvider>\n          <ShippingContextProvider>\n            <ColorContextProvider>\n              <WebApp />\n            </ColorContextProvider>\n          </ShippingContextProvider>\n        </ProductContextProvider>\n      </UserContextProvider>\n      {/* </StrictMode> */}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}