{"ast":null,"code":"// import axios from 'axios';\n\n// // Create a custom Axios instance\n// const axiosInstance = axios.create({\n//     baseURL: 'http://localhost:8080/api', // Set your base URL here\n//     withCredentials: true, // Include credentials like cookies in requests\n// });\n\n// // Add an interceptor to handle HTTP errors\n// axiosInstance.interceptors.response.use(\n//     response => response, // Pass through the response if no errors\n//     error => {\n//         let message = 'خطای غیرمنتظره رخ داد.'; // Default error message\n\n//         // Check if the error response is available (HTTP status code errors)\n//         if (error.response) {\n//             const { status, data } = error.response;\n\n//             // If a message is present in the server's response, use it\n//             message = data.message || message;\n\n//             // Handle specific HTTP status codes\n//             switch (status) {\n//                 case 400:\n//                     message = data.message || 'درخواست اشتباه ارسال شده است.';\n//                     break;\n//                 case 401:\n//                     message = data.message || 'لطفاً وارد حساب کاربری خود شوید.';\n//                     break;\n//                 case 403:\n//                     message = data.message || 'دسترسی محدود است.';\n//                     break;\n//                 case 404:\n//                     message = data.message || 'صفحه مورد نظر یافت نشد.';\n//                     break;\n//                 case 409:\n//                     message = data.message || 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\n//                     break;\n//                 case 422:\n//                     message = data.message || 'داده‌های ورودی معتبر نیستند.';\n//                     break;\n//                 case 429:\n//                     message = data.message || 'Too many requests, please try again later.';\n//                     break;\n//                 case 500:\n//                     message = data.message || 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\n//                     break;\n//                 case 502:\n//                     message = data.message || 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\n//                     break;\n//                 case 503:\n//                     message = data.message || 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\n//                     break;\n//                 default:\n//                     message = data.message || 'خطای غیرمنتظره رخ داد.';\n//                     break;\n//             }\n//         }\n//         // If no response (network errors, server down, etc.)\n//         else if (error.request) {\n//             message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\n//         }\n//         // If something went wrong during request setup\n//         else if (error.config) {\n//             message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\n//         }\n//         // If the error is related to Axios itself (e.g., timeout, invalid URL)\n//         else if (error.message) {\n//             message = error.message || 'خطای غیرمنتظره رخ داد.';\n//         }\n\n//         // Optionally, you can show a notification, log the error, or perform other actions here\n//         console.error(message);  // Log the error message for debugging purposes\n\n//         // Return the error message to be displayed to the user\n//         // return Promise.reject(new Error(message));\n//         return Promise.reject({ message, error });\n//     }\n// );\n\n// export default axiosInstance;\n\n// import axios from 'axios';\n\n// // Create a custom Axios instance\n// const axiosInstance = axios.create({\n//     baseURL: 'http://localhost:8080/api', // Base API URL\n//     withCredentials: true, // Include cookies with requests\n// });\n\n// // Helper function to retrieve CSRF token via a GET request\n// const getCsrfTokenFromApi = async () => {\n//     try {\n//         const response = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\n//         return response.data.csrfToken; // Assuming the server returns the CSRF token in the `csrfToken` field\n//     } catch (error) {\n//         console.error('Error fetching CSRF token:', error);\n//         return null;\n//     }\n// };\n\n// const csrfToken = await getCsrfTokenFromApi();\n// // Request interceptor to add CSRF token to headers\n// axiosInstance.interceptors.request.use(\n//     async (config) => {\n//         console.log('Sending CSRF Token:', csrfToken);\n//         if (csrfToken) {\n//             config.headers['csrf-token'] = csrfToken; // Add CSRF token to headers\n//         }\n//         return config;\n//     },\n//     (error) => {\n//         // Handle request setup errors\n//         return Promise.reject(error);\n//     }\n// );\n\n// axiosInstance.interceptors.response.use(\n//     (response) => response,\n//     async (error) => {\n//         const originalRequest = error.config;\n\n//         let message = 'خطای غیرمنتظره رخ داد.';\n\n//         if (error.response) {\n//             const { status, data } = error.response;\n\n//             message = data.message || message;\n\n//             switch (status) {\n//                 case 400:\n//                     message = 'درخواست اشتباه ارسال شده است.';\n//                     break;\n//                 case 401:\n//                     message = 'لطفاً وارد حساب کاربری خود شوید.';\n//                     break;\n//                     // case 403:\n//                     // Attempt to refresh CSRF token and retry the request\n//                     if (!originalRequest._retry) {\n//                         originalRequest._retry = true; // Mark request as retried\n//                         try {\n//                             // Fetch new CSRF token\n//                             const csrfResponse = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\n//                             const newCsrfToken = csrfResponse.data.csrfToken;\n\n//                             // Add new token to original request headers\n//                             if (newCsrfToken) {\n//                                 originalRequest.headers['csrf-token'] = newCsrfToken;\n//                             }\n\n//                             // Retry the original request\n//                             return axiosInstance(originalRequest);\n//                         } catch (csrfError) {\n//                             console.error('Failed to refresh CSRF token:', csrfError);\n//                             message = 'دریافت توکن ناموفق بود. لطفاً دوباره تلاش کنید.';\n//                         }\n//                     } else {\n//                         message = 'دسترسی محدود است.';\n//                     }\n//                     break;\n//                 case 403:\n//                     message = '403.';\n//                 case 404:\n//                     message = 'صفحه مورد نظر یافت نشد.';\n//                     break;\n//                 case 409:\n//                     message = 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\n//                     break;\n//                 case 422:\n//                     message = 'داده‌های ورودی معتبر نیستند.';\n//                     break;\n//                 case 429:\n//                     message = 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\n//                     break;\n//                 case 500:\n//                     message = 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\n//                     break;\n//                 case 502:\n//                     message = 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\n//                     break;\n//                 case 503:\n//                     message = 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\n//                     break;\n//                 default:\n//                     message = 'خطای غیرمنتظره رخ داد.';\n//                     break;\n//             }\n//         }\n//         else if (error.request) {\n//             message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\n//         }\n//         else if (error.config) {\n//             message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\n//         }\n//         else if (error.message) {\n//             message = error.message;\n//         }\n\n//         console.error(message);\n\n//         return Promise.reject({ message, error });\n//     }\n// );\n\n// export default axiosInstance;\n\n// Helper function to retrieve CSRF token from cookies\n\n// const getCsrfTokenFromCookies = () => {\n//     const csrfCookie = document.cookie.split('; ').find(row => row.startsWith('_csrf'));\n//     return csrfCookie ? csrfCookie.split('=')[1] : null;\n// };\n\n// Request interceptor to add CSRF token to headers\n\n// axiosInstance.interceptors.request.use(\n//     (config) => {\n//         const csrfToken = getCsrfTokenFromCookies();\n//         console.log('Sending CSRF Token:', csrfToken);\n//         if (csrfToken) {\n//             config.headers['csrf-token'] = csrfToken; // Add CSRF token to headers\n//         }\n//         return config;\n//     },\n//     (error) => {\n//         // Handle request setup errors\n//         return Promise.reject(error);\n//     }\n// );\n\nimport axios from 'axios';\n\n// Create a custom Axios instance\nconst axiosInstance = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n  // Base API URL\n  withCredentials: true // Include cookies with requests\n});\nlet csrfToken = null;\n\n// Request interceptor to add CSRF token to headers\naxiosInstance.interceptors.request.use(async config => {\n  // If it's a mutating request (POST, PUT, DELETE, PATCH) and we don't have a token\n  if (['post', 'put', 'delete', 'patch'].includes(config.method.toLowerCase()) && !csrfToken) {\n    await getCsrfToken();\n  }\n  if (csrfToken && ['post', 'put', 'delete', 'patch'].includes(config.method.toLowerCase())) {\n    config.headers['csrf-token'] = csrfToken;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Function to fetch CSRF token\nasync function getCsrfToken() {\n  try {\n    const response = await axiosInstance.get('/csrf-token');\n    csrfToken = response.data.csrfToken;\n  } catch (error) {\n    console.error('Error fetching CSRF token:', error);\n    throw error;\n  }\n}\n\n// Initial token fetch when app loads\ngetCsrfToken().catch(console.error);\naxiosInstance.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  let message = 'خطای غیرمنتظره رخ داد.';\n  if (error.response) {\n    const {\n      status,\n      data\n    } = error.response;\n    message = data.message || message;\n    switch (status) {\n      case 400:\n        message = data.message || 'درخواست اشتباه ارسال شده است.';\n        break;\n      case 401:\n        message = data.message || 'لطفاً وارد حساب کاربری خود شوید.';\n        break;\n      case 403:\n        message = data.message || 'دسترسی رد شد.';\n        break;\n      case 404:\n        message = data.message || 'صفحه مورد نظر یافت نشد.';\n        break;\n      case 409:\n        message = data.message || 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\n        break;\n      case 422:\n        message = data.message || 'داده‌های ورودی معتبر نیستند.';\n        break;\n      case 429:\n        message = data.message || 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\n        break;\n      case 500:\n        message = data.message || 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\n        break;\n      case 502:\n        message = data.message || 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\n        break;\n      case 503:\n        message = data.message || 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\n        break;\n      default:\n        message = data.message || 'خطای غیرمنتظره رخ داد.';\n        break;\n    }\n  } else if (error.request) {\n    message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\n  } else if (error.config) {\n    message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\n  } else if (error.message) {\n    message = error.message;\n  }\n  console.error(message);\n  return Promise.reject({\n    message,\n    error\n  });\n});\nexport default axiosInstance;\n\n// case 403:\n// // Attempt to refresh CSRF token and retry the request\n// if (!originalRequest._retry) {\n//     originalRequest._retry = true; // Mark request as retried\n//     try {\n//         // Fetch new CSRF token\n//         const csrfResponse = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\n//         const newCsrfToken = csrfResponse.data.csrfToken;\n\n//         // Add new token to original request headers\n//         if (newCsrfToken) {\n//             originalRequest.headers['x-csrf-token'] = newCsrfToken;\n//         }\n\n//         // Retry the original request\n//         return axiosInstance(originalRequest);\n//     } catch (csrfError) {\n//         console.error('Failed to refresh CSRF token:', csrfError);\n//         message = 'دریافت توکن ناموفق بود. لطفاً دوباره تلاش کنید.';\n//     }\n// } else {\n//     message = 'دسترسی محدود است.';\n// }\n// break;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","process","env","REACT_APP_API_BASE_URL","withCredentials","csrfToken","interceptors","request","use","config","includes","method","toLowerCase","getCsrfToken","headers","error","Promise","reject","response","get","data","console","catch","originalRequest","message","status"],"sources":["C:/Users/computer/Desktop/indicator/shop/client/src/Helper/apiInterceptors.js"],"sourcesContent":["// import axios from 'axios';\r\n\r\n// // Create a custom Axios instance\r\n// const axiosInstance = axios.create({\r\n//     baseURL: 'http://localhost:8080/api', // Set your base URL here\r\n//     withCredentials: true, // Include credentials like cookies in requests\r\n// });\r\n\r\n// // Add an interceptor to handle HTTP errors\r\n// axiosInstance.interceptors.response.use(\r\n//     response => response, // Pass through the response if no errors\r\n//     error => {\r\n//         let message = 'خطای غیرمنتظره رخ داد.'; // Default error message\r\n\r\n//         // Check if the error response is available (HTTP status code errors)\r\n//         if (error.response) {\r\n//             const { status, data } = error.response;\r\n\r\n//             // If a message is present in the server's response, use it\r\n//             message = data.message || message;\r\n\r\n//             // Handle specific HTTP status codes\r\n//             switch (status) {\r\n//                 case 400:\r\n//                     message = data.message || 'درخواست اشتباه ارسال شده است.';\r\n//                     break;\r\n//                 case 401:\r\n//                     message = data.message || 'لطفاً وارد حساب کاربری خود شوید.';\r\n//                     break;\r\n//                 case 403:\r\n//                     message = data.message || 'دسترسی محدود است.';\r\n//                     break;\r\n//                 case 404:\r\n//                     message = data.message || 'صفحه مورد نظر یافت نشد.';\r\n//                     break;\r\n//                 case 409:\r\n//                     message = data.message || 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\r\n//                     break;\r\n//                 case 422:\r\n//                     message = data.message || 'داده‌های ورودی معتبر نیستند.';\r\n//                     break;\r\n//                 case 429:\r\n//                     message = data.message || 'Too many requests, please try again later.';\r\n//                     break;\r\n//                 case 500:\r\n//                     message = data.message || 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 case 502:\r\n//                     message = data.message || 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 case 503:\r\n//                     message = data.message || 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 default:\r\n//                     message = data.message || 'خطای غیرمنتظره رخ داد.';\r\n//                     break;\r\n//             }\r\n//         }\r\n//         // If no response (network errors, server down, etc.)\r\n//         else if (error.request) {\r\n//             message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\r\n//         }\r\n//         // If something went wrong during request setup\r\n//         else if (error.config) {\r\n//             message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\r\n//         }\r\n//         // If the error is related to Axios itself (e.g., timeout, invalid URL)\r\n//         else if (error.message) {\r\n//             message = error.message || 'خطای غیرمنتظره رخ داد.';\r\n//         }\r\n\r\n//         // Optionally, you can show a notification, log the error, or perform other actions here\r\n//         console.error(message);  // Log the error message for debugging purposes\r\n\r\n//         // Return the error message to be displayed to the user\r\n//         // return Promise.reject(new Error(message));\r\n//         return Promise.reject({ message, error });\r\n//     }\r\n// );\r\n\r\n// export default axiosInstance;\r\n\r\n\r\n// import axios from 'axios';\r\n\r\n// // Create a custom Axios instance\r\n// const axiosInstance = axios.create({\r\n//     baseURL: 'http://localhost:8080/api', // Base API URL\r\n//     withCredentials: true, // Include cookies with requests\r\n// });\r\n\r\n// // Helper function to retrieve CSRF token via a GET request\r\n// const getCsrfTokenFromApi = async () => {\r\n//     try {\r\n//         const response = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\r\n//         return response.data.csrfToken; // Assuming the server returns the CSRF token in the `csrfToken` field\r\n//     } catch (error) {\r\n//         console.error('Error fetching CSRF token:', error);\r\n//         return null;\r\n//     }\r\n// };\r\n\r\n// const csrfToken = await getCsrfTokenFromApi();\r\n// // Request interceptor to add CSRF token to headers\r\n// axiosInstance.interceptors.request.use(\r\n//     async (config) => {\r\n//         console.log('Sending CSRF Token:', csrfToken);\r\n//         if (csrfToken) {\r\n//             config.headers['csrf-token'] = csrfToken; // Add CSRF token to headers\r\n//         }\r\n//         return config;\r\n//     },\r\n//     (error) => {\r\n//         // Handle request setup errors\r\n//         return Promise.reject(error);\r\n//     }\r\n// );\r\n\r\n// axiosInstance.interceptors.response.use(\r\n//     (response) => response,\r\n//     async (error) => {\r\n//         const originalRequest = error.config;\r\n\r\n//         let message = 'خطای غیرمنتظره رخ داد.';\r\n\r\n//         if (error.response) {\r\n//             const { status, data } = error.response;\r\n\r\n//             message = data.message || message;\r\n\r\n//             switch (status) {\r\n//                 case 400:\r\n//                     message = 'درخواست اشتباه ارسال شده است.';\r\n//                     break;\r\n//                 case 401:\r\n//                     message = 'لطفاً وارد حساب کاربری خود شوید.';\r\n//                     break;\r\n//                     // case 403:\r\n//                     // Attempt to refresh CSRF token and retry the request\r\n//                     if (!originalRequest._retry) {\r\n//                         originalRequest._retry = true; // Mark request as retried\r\n//                         try {\r\n//                             // Fetch new CSRF token\r\n//                             const csrfResponse = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\r\n//                             const newCsrfToken = csrfResponse.data.csrfToken;\r\n\r\n//                             // Add new token to original request headers\r\n//                             if (newCsrfToken) {\r\n//                                 originalRequest.headers['csrf-token'] = newCsrfToken;\r\n//                             }\r\n\r\n//                             // Retry the original request\r\n//                             return axiosInstance(originalRequest);\r\n//                         } catch (csrfError) {\r\n//                             console.error('Failed to refresh CSRF token:', csrfError);\r\n//                             message = 'دریافت توکن ناموفق بود. لطفاً دوباره تلاش کنید.';\r\n//                         }\r\n//                     } else {\r\n//                         message = 'دسترسی محدود است.';\r\n//                     }\r\n//                     break;\r\n//                 case 403:\r\n//                     message = '403.';\r\n//                 case 404:\r\n//                     message = 'صفحه مورد نظر یافت نشد.';\r\n//                     break;\r\n//                 case 409:\r\n//                     message = 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\r\n//                     break;\r\n//                 case 422:\r\n//                     message = 'داده‌های ورودی معتبر نیستند.';\r\n//                     break;\r\n//                 case 429:\r\n//                     message = 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\r\n//                     break;\r\n//                 case 500:\r\n//                     message = 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 case 502:\r\n//                     message = 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 case 503:\r\n//                     message = 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 default:\r\n//                     message = 'خطای غیرمنتظره رخ داد.';\r\n//                     break;\r\n//             }\r\n//         }\r\n//         else if (error.request) {\r\n//             message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\r\n//         }\r\n//         else if (error.config) {\r\n//             message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\r\n//         }\r\n//         else if (error.message) {\r\n//             message = error.message;\r\n//         }\r\n\r\n//         console.error(message);\r\n\r\n//         return Promise.reject({ message, error });\r\n//     }\r\n// );\r\n\r\n// export default axiosInstance;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Helper function to retrieve CSRF token from cookies\r\n\r\n// const getCsrfTokenFromCookies = () => {\r\n//     const csrfCookie = document.cookie.split('; ').find(row => row.startsWith('_csrf'));\r\n//     return csrfCookie ? csrfCookie.split('=')[1] : null;\r\n// };\r\n\r\n// Request interceptor to add CSRF token to headers\r\n\r\n// axiosInstance.interceptors.request.use(\r\n//     (config) => {\r\n//         const csrfToken = getCsrfTokenFromCookies();\r\n//         console.log('Sending CSRF Token:', csrfToken);\r\n//         if (csrfToken) {\r\n//             config.headers['csrf-token'] = csrfToken; // Add CSRF token to headers\r\n//         }\r\n//         return config;\r\n//     },\r\n//     (error) => {\r\n//         // Handle request setup errors\r\n//         return Promise.reject(error);\r\n//     }\r\n// );\r\n\r\n\r\n\r\nimport axios from 'axios';\r\n\r\n// Create a custom Axios instance\r\nconst axiosInstance = axios.create({\r\n    baseURL:process.env.REACT_APP_API_BASE_URL , // Base API URL\r\n    withCredentials: true, // Include cookies with requests\r\n});\r\n\r\n\r\nlet csrfToken = null;\r\n\r\n// Request interceptor to add CSRF token to headers\r\naxiosInstance.interceptors.request.use(async (config) => {\r\n  // If it's a mutating request (POST, PUT, DELETE, PATCH) and we don't have a token\r\n  if (['post', 'put', 'delete', 'patch'].includes(config.method.toLowerCase()) && !csrfToken) {\r\n    await getCsrfToken();\r\n  }\r\n  \r\n  if (csrfToken && ['post', 'put', 'delete', 'patch'].includes(config.method.toLowerCase())) {\r\n    config.headers['csrf-token'] = csrfToken;\r\n  }\r\n  \r\n  return config;\r\n}, (error) => {\r\n  return Promise.reject(error);\r\n});\r\n\r\n// Function to fetch CSRF token\r\nasync function getCsrfToken() {\r\n  try {\r\n    const response = await axiosInstance.get('/csrf-token');\r\n    csrfToken = response.data.csrfToken;\r\n  } catch (error) {\r\n    console.error('Error fetching CSRF token:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Initial token fetch when app loads\r\ngetCsrfToken().catch(console.error);\r\n\r\n\r\naxiosInstance.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        let message = 'خطای غیرمنتظره رخ داد.';\r\n\r\n        if (error.response) {\r\n            const { status, data } = error.response;\r\n\r\n            message = data.message || message;\r\n\r\n            switch (status) {\r\n                case 400:\r\n                    message = data.message || 'درخواست اشتباه ارسال شده است.';\r\n                    break;\r\n                case 401:\r\n                    message = data.message || 'لطفاً وارد حساب کاربری خود شوید.';\r\n                    break;\r\n                case 403:\r\n                    message = data.message || 'دسترسی رد شد.';\r\n                    break;\r\n                case 404:\r\n                    message = data.message || 'صفحه مورد نظر یافت نشد.';\r\n                    break;\r\n                case 409:\r\n                    message = data.message || 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\r\n                    break;\r\n                case 422:\r\n                    message = data.message || 'داده‌های ورودی معتبر نیستند.';\r\n                    break;\r\n                case 429:\r\n                    message = data.message || 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\r\n                    break;\r\n                case 500:\r\n                    message = data.message || 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\r\n                    break;\r\n                case 502:\r\n                    message = data.message || 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\r\n                    break;\r\n                case 503:\r\n                    message = data.message || 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\r\n                    break;\r\n                default:\r\n                    message = data.message || 'خطای غیرمنتظره رخ داد.';\r\n                    break;\r\n            }\r\n        }\r\n        else if (error.request) {\r\n            message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\r\n        }\r\n        else if (error.config) {\r\n            message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\r\n        }\r\n        else if (error.message) {\r\n            message = error.message;\r\n        }\r\n\r\n        console.error(message);\r\n\r\n        return Promise.reject({ message, error });\r\n    }\r\n);\r\n\r\nexport default axiosInstance;\r\n\r\n\r\n                    // case 403:\r\n                    // // Attempt to refresh CSRF token and retry the request\r\n                    // if (!originalRequest._retry) {\r\n                    //     originalRequest._retry = true; // Mark request as retried\r\n                    //     try {\r\n                    //         // Fetch new CSRF token\r\n                    //         const csrfResponse = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\r\n                    //         const newCsrfToken = csrfResponse.data.csrfToken;\r\n\r\n                    //         // Add new token to original request headers\r\n                    //         if (newCsrfToken) {\r\n                    //             originalRequest.headers['x-csrf-token'] = newCsrfToken;\r\n                    //         }\r\n\r\n                    //         // Retry the original request\r\n                    //         return axiosInstance(originalRequest);\r\n                    //     } catch (csrfError) {\r\n                    //         console.error('Failed to refresh CSRF token:', csrfError);\r\n                    //         message = 'دریافت توکن ناموفق بود. لطفاً دوباره تلاش کنید.';\r\n                    //     }\r\n                    // } else {\r\n                    //     message = 'دسترسی محدود است.';\r\n                    // }\r\n                    // break;"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAqBA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC/BC,OAAO,EAACC,OAAO,CAACC,GAAG,CAACC,sBAAsB;EAAG;EAC7CC,eAAe,EAAE,IAAI,CAAE;AA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}