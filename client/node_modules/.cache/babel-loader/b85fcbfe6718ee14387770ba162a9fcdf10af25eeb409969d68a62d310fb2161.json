{"ast":null,"code":"// import axios from 'axios';\n// // Create a custom Axios instance\n// const axiosInstance = axios.create({\n//     baseURL: 'http://localhost:8080/api', // Set your base URL here\n//     withCredentials: true, // Include credentials like cookies in requests\n// });\n// // Add an interceptor to handle HTTP errors\n// axiosInstance.interceptors.response.use(\n//     response => response, // Pass through the response if no errors\n//     error => {\n//         let message = 'خطای غیرمنتظره رخ داد.'; // Default error message\n//         // Check if the error response is available (HTTP status code errors)\n//         if (error.response) {\n//             const { status, data } = error.response;\n//             // If a message is present in the server's response, use it\n//             message = data.message || message;\n//             // Handle specific HTTP status codes\n//             switch (status) {\n//                 case 400:\n//                     message = data.message || 'درخواست اشتباه ارسال شده است.';\n//                     break;\n//                 case 401:\n//                     message = data.message || 'لطفاً وارد حساب کاربری خود شوید.';\n//                     break;\n//                 case 403:\n//                     message = data.message || 'دسترسی محدود است.';\n//                     break;\n//                 case 404:\n//                     message = data.message || 'صفحه مورد نظر یافت نشد.';\n//                     break;\n//                 case 409:\n//                     message = data.message || 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\n//                     break;\n//                 case 422:\n//                     message = data.message || 'داده‌های ورودی معتبر نیستند.';\n//                     break;\n//                 case 429:\n//                     message = data.message || 'Too many requests, please try again later.';\n//                     break;\n//                 case 500:\n//                     message = data.message || 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\n//                     break;\n//                 case 502:\n//                     message = data.message || 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\n//                     break;\n//                 case 503:\n//                     message = data.message || 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\n//                     break;\n//                 default:\n//                     message = data.message || 'خطای غیرمنتظره رخ داد.';\n//                     break;\n//             }\n//         }\n//         // If no response (network errors, server down, etc.)\n//         else if (error.request) {\n//             message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\n//         }\n//         // If something went wrong during request setup\n//         else if (error.config) {\n//             message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\n//         }\n//         // If the error is related to Axios itself (e.g., timeout, invalid URL)\n//         else if (error.message) {\n//             message = error.message || 'خطای غیرمنتظره رخ داد.';\n//         }\n//         // Optionally, you can show a notification, log the error, or perform other actions here\n//         console.error(message);  // Log the error message for debugging purposes\n//         // Return the error message to be displayed to the user\n//         // return Promise.reject(new Error(message));\n//         return Promise.reject({ message, error });\n//     }\n// );\n// export default axiosInstance;\n// import axios from 'axios';\n// // Create a custom Axios instance\n// const axiosInstance = axios.create({\n//     baseURL: 'http://localhost:8080/api', // Base API URL\n//     withCredentials: true, // Include cookies with requests\n// });\n// // Helper function to retrieve CSRF token via a GET request\n// const getCsrfTokenFromApi = async () => {\n//     try {\n//         const response = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\n//         return response.data.csrfToken; // Assuming the server returns the CSRF token in the `csrfToken` field\n//     } catch (error) {\n//         console.error('Error fetching CSRF token:', error);\n//         return null;\n//     }\n// };\n// const csrfToken = await getCsrfTokenFromApi();\n// // Request interceptor to add CSRF token to headers\n// axiosInstance.interceptors.request.use(\n//     async (config) => {\n//         console.log('Sending CSRF Token:', csrfToken);\n//         if (csrfToken) {\n//             config.headers['csrf-token'] = csrfToken; // Add CSRF token to headers\n//         }\n//         return config;\n//     },\n//     (error) => {\n//         // Handle request setup errors\n//         return Promise.reject(error);\n//     }\n// );\n// axiosInstance.interceptors.response.use(\n//     (response) => response,\n//     async (error) => {\n//         const originalRequest = error.config;\n//         let message = 'خطای غیرمنتظره رخ داد.';\n//         if (error.response) {\n//             const { status, data } = error.response;\n//             message = data.message || message;\n//             switch (status) {\n//                 case 400:\n//                     message = 'درخواست اشتباه ارسال شده است.';\n//                     break;\n//                 case 401:\n//                     message = 'لطفاً وارد حساب کاربری خود شوید.';\n//                     break;\n//                     // case 403:\n//                     // Attempt to refresh CSRF token and retry the request\n//                     if (!originalRequest._retry) {\n//                         originalRequest._retry = true; // Mark request as retried\n//                         try {\n//                             // Fetch new CSRF token\n//                             const csrfResponse = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\n//                             const newCsrfToken = csrfResponse.data.csrfToken;\n//                             // Add new token to original request headers\n//                             if (newCsrfToken) {\n//                                 originalRequest.headers['csrf-token'] = newCsrfToken;\n//                             }\n//                             // Retry the original request\n//                             return axiosInstance(originalRequest);\n//                         } catch (csrfError) {\n//                             console.error('Failed to refresh CSRF token:', csrfError);\n//                             message = 'دریافت توکن ناموفق بود. لطفاً دوباره تلاش کنید.';\n//                         }\n//                     } else {\n//                         message = 'دسترسی محدود است.';\n//                     }\n//                     break;\n//                 case 403:\n//                     message = '403.';\n//                 case 404:\n//                     message = 'صفحه مورد نظر یافت نشد.';\n//                     break;\n//                 case 409:\n//                     message = 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\n//                     break;\n//                 case 422:\n//                     message = 'داده‌های ورودی معتبر نیستند.';\n//                     break;\n//                 case 429:\n//                     message = 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\n//                     break;\n//                 case 500:\n//                     message = 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\n//                     break;\n//                 case 502:\n//                     message = 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\n//                     break;\n//                 case 503:\n//                     message = 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\n//                     break;\n//                 default:\n//                     message = 'خطای غیرمنتظره رخ داد.';\n//                     break;\n//             }\n//         }\n//         else if (error.request) {\n//             message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\n//         }\n//         else if (error.config) {\n//             message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\n//         }\n//         else if (error.message) {\n//             message = error.message;\n//         }\n//         console.error(message);\n//         return Promise.reject({ message, error });\n//     }\n// );\n// export default axiosInstance;\nimport axios from'axios';// Create a custom Axios instance\nconst axiosInstance=axios.create({baseURL:process.env.REACT_APP_API_BASE_URL,// Base API URL\nwithCredentials:true// Include cookies with requests\n});// Helper function to retrieve CSRF token from cookies\n// const getCsrfTokenFromCookies = () => {\n//     const csrfCookie = document.cookie.split('; ').find(row => row.startsWith('_csrf'));\n//     return csrfCookie ? csrfCookie.split('=')[1] : null;\n// };\n// Request interceptor to add CSRF token to headers\n// axiosInstance.interceptors.request.use(\n//     (config) => {\n//         const csrfToken = getCsrfTokenFromCookies();\n//         console.log('Sending CSRF Token:', csrfToken);\n//         if (csrfToken) {\n//             config.headers['csrf-token'] = csrfToken; // Add CSRF token to headers\n//         }\n//         return config;\n//     },\n//     (error) => {\n//         // Handle request setup errors\n//         return Promise.reject(error);\n//     }\n// );\naxiosInstance.interceptors.response.use(response=>response,async error=>{const originalRequest=error.config;let message='خطای غیرمنتظره رخ داد.';if(error.response){const{status,data}=error.response;message=data.message||message;switch(status){case 400:message=data.message||'درخواست اشتباه ارسال شده است.';break;case 401:message=data.message||'لطفاً وارد حساب کاربری خود شوید.';break;// case 403:\n// Attempt to refresh CSRF token and retry the request\nif(!originalRequest._retry){originalRequest._retry=true;// Mark request as retried\ntry{// Fetch new CSRF token\nconst csrfResponse=await axios.get('http://localhost:8080/api/csrf-token',{withCredentials:true});const newCsrfToken=csrfResponse.data.csrfToken;// Add new token to original request headers\nif(newCsrfToken){originalRequest.headers['x-csrf-token']=newCsrfToken;}// Retry the original request\nreturn axiosInstance(originalRequest);}catch(csrfError){console.error('Failed to refresh CSRF token:',csrfError);message='دریافت توکن ناموفق بود. لطفاً دوباره تلاش کنید.';}}else{message='دسترسی محدود است.';}break;case 403:message=data.message||'403.';case 404:message=data.message||'صفحه مورد نظر یافت نشد.';break;case 409:message=data.message||'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';break;case 422:message=data.message||'داده‌های ورودی معتبر نیستند.';break;case 429:message=data.message||'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';break;case 500:message=data.message||'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';break;case 502:message=data.message||'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';break;case 503:message=data.message||'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';break;default:message=data.message||'خطای غیرمنتظره رخ داد.';break;}}else if(error.request){message='خطای شبکه. لطفاً اتصال خود را بررسی کنید.';}else if(error.config){message='مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';}else if(error.message){message=error.message;}console.error(message);return Promise.reject({message,error});});export default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","process","env","REACT_APP_API_BASE_URL","withCredentials","interceptors","response","use","error","originalRequest","config","message","status","data","_retry","csrfResponse","get","newCsrfToken","csrfToken","headers","csrfError","console","request","Promise","reject"],"sources":["C:/Users/computer/Desktop/templates/shop/client/src/Helper/apiInterceptors.js"],"sourcesContent":["// import axios from 'axios';\r\n\r\n// // Create a custom Axios instance\r\n// const axiosInstance = axios.create({\r\n//     baseURL: 'http://localhost:8080/api', // Set your base URL here\r\n//     withCredentials: true, // Include credentials like cookies in requests\r\n// });\r\n\r\n// // Add an interceptor to handle HTTP errors\r\n// axiosInstance.interceptors.response.use(\r\n//     response => response, // Pass through the response if no errors\r\n//     error => {\r\n//         let message = 'خطای غیرمنتظره رخ داد.'; // Default error message\r\n\r\n//         // Check if the error response is available (HTTP status code errors)\r\n//         if (error.response) {\r\n//             const { status, data } = error.response;\r\n\r\n//             // If a message is present in the server's response, use it\r\n//             message = data.message || message;\r\n\r\n//             // Handle specific HTTP status codes\r\n//             switch (status) {\r\n//                 case 400:\r\n//                     message = data.message || 'درخواست اشتباه ارسال شده است.';\r\n//                     break;\r\n//                 case 401:\r\n//                     message = data.message || 'لطفاً وارد حساب کاربری خود شوید.';\r\n//                     break;\r\n//                 case 403:\r\n//                     message = data.message || 'دسترسی محدود است.';\r\n//                     break;\r\n//                 case 404:\r\n//                     message = data.message || 'صفحه مورد نظر یافت نشد.';\r\n//                     break;\r\n//                 case 409:\r\n//                     message = data.message || 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\r\n//                     break;\r\n//                 case 422:\r\n//                     message = data.message || 'داده‌های ورودی معتبر نیستند.';\r\n//                     break;\r\n//                 case 429:\r\n//                     message = data.message || 'Too many requests, please try again later.';\r\n//                     break;\r\n//                 case 500:\r\n//                     message = data.message || 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 case 502:\r\n//                     message = data.message || 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 case 503:\r\n//                     message = data.message || 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 default:\r\n//                     message = data.message || 'خطای غیرمنتظره رخ داد.';\r\n//                     break;\r\n//             }\r\n//         }\r\n//         // If no response (network errors, server down, etc.)\r\n//         else if (error.request) {\r\n//             message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\r\n//         }\r\n//         // If something went wrong during request setup\r\n//         else if (error.config) {\r\n//             message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\r\n//         }\r\n//         // If the error is related to Axios itself (e.g., timeout, invalid URL)\r\n//         else if (error.message) {\r\n//             message = error.message || 'خطای غیرمنتظره رخ داد.';\r\n//         }\r\n\r\n//         // Optionally, you can show a notification, log the error, or perform other actions here\r\n//         console.error(message);  // Log the error message for debugging purposes\r\n\r\n//         // Return the error message to be displayed to the user\r\n//         // return Promise.reject(new Error(message));\r\n//         return Promise.reject({ message, error });\r\n//     }\r\n// );\r\n\r\n// export default axiosInstance;\r\n\r\n\r\n// import axios from 'axios';\r\n\r\n// // Create a custom Axios instance\r\n// const axiosInstance = axios.create({\r\n//     baseURL: 'http://localhost:8080/api', // Base API URL\r\n//     withCredentials: true, // Include cookies with requests\r\n// });\r\n\r\n// // Helper function to retrieve CSRF token via a GET request\r\n// const getCsrfTokenFromApi = async () => {\r\n//     try {\r\n//         const response = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\r\n//         return response.data.csrfToken; // Assuming the server returns the CSRF token in the `csrfToken` field\r\n//     } catch (error) {\r\n//         console.error('Error fetching CSRF token:', error);\r\n//         return null;\r\n//     }\r\n// };\r\n\r\n// const csrfToken = await getCsrfTokenFromApi();\r\n// // Request interceptor to add CSRF token to headers\r\n// axiosInstance.interceptors.request.use(\r\n//     async (config) => {\r\n//         console.log('Sending CSRF Token:', csrfToken);\r\n//         if (csrfToken) {\r\n//             config.headers['csrf-token'] = csrfToken; // Add CSRF token to headers\r\n//         }\r\n//         return config;\r\n//     },\r\n//     (error) => {\r\n//         // Handle request setup errors\r\n//         return Promise.reject(error);\r\n//     }\r\n// );\r\n\r\n// axiosInstance.interceptors.response.use(\r\n//     (response) => response,\r\n//     async (error) => {\r\n//         const originalRequest = error.config;\r\n\r\n//         let message = 'خطای غیرمنتظره رخ داد.';\r\n\r\n//         if (error.response) {\r\n//             const { status, data } = error.response;\r\n\r\n//             message = data.message || message;\r\n\r\n//             switch (status) {\r\n//                 case 400:\r\n//                     message = 'درخواست اشتباه ارسال شده است.';\r\n//                     break;\r\n//                 case 401:\r\n//                     message = 'لطفاً وارد حساب کاربری خود شوید.';\r\n//                     break;\r\n//                     // case 403:\r\n//                     // Attempt to refresh CSRF token and retry the request\r\n//                     if (!originalRequest._retry) {\r\n//                         originalRequest._retry = true; // Mark request as retried\r\n//                         try {\r\n//                             // Fetch new CSRF token\r\n//                             const csrfResponse = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\r\n//                             const newCsrfToken = csrfResponse.data.csrfToken;\r\n\r\n//                             // Add new token to original request headers\r\n//                             if (newCsrfToken) {\r\n//                                 originalRequest.headers['csrf-token'] = newCsrfToken;\r\n//                             }\r\n\r\n//                             // Retry the original request\r\n//                             return axiosInstance(originalRequest);\r\n//                         } catch (csrfError) {\r\n//                             console.error('Failed to refresh CSRF token:', csrfError);\r\n//                             message = 'دریافت توکن ناموفق بود. لطفاً دوباره تلاش کنید.';\r\n//                         }\r\n//                     } else {\r\n//                         message = 'دسترسی محدود است.';\r\n//                     }\r\n//                     break;\r\n//                 case 403:\r\n//                     message = '403.';\r\n//                 case 404:\r\n//                     message = 'صفحه مورد نظر یافت نشد.';\r\n//                     break;\r\n//                 case 409:\r\n//                     message = 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\r\n//                     break;\r\n//                 case 422:\r\n//                     message = 'داده‌های ورودی معتبر نیستند.';\r\n//                     break;\r\n//                 case 429:\r\n//                     message = 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\r\n//                     break;\r\n//                 case 500:\r\n//                     message = 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 case 502:\r\n//                     message = 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 case 503:\r\n//                     message = 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\r\n//                     break;\r\n//                 default:\r\n//                     message = 'خطای غیرمنتظره رخ داد.';\r\n//                     break;\r\n//             }\r\n//         }\r\n//         else if (error.request) {\r\n//             message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\r\n//         }\r\n//         else if (error.config) {\r\n//             message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\r\n//         }\r\n//         else if (error.message) {\r\n//             message = error.message;\r\n//         }\r\n\r\n//         console.error(message);\r\n\r\n//         return Promise.reject({ message, error });\r\n//     }\r\n// );\r\n\r\n// export default axiosInstance;\r\n\r\n\r\nimport axios from 'axios';\r\n\r\n// Create a custom Axios instance\r\nconst axiosInstance = axios.create({\r\n    baseURL:process.env.REACT_APP_API_BASE_URL , // Base API URL\r\n    withCredentials: true, // Include cookies with requests\r\n});\r\n\r\n// Helper function to retrieve CSRF token from cookies\r\n\r\n// const getCsrfTokenFromCookies = () => {\r\n//     const csrfCookie = document.cookie.split('; ').find(row => row.startsWith('_csrf'));\r\n//     return csrfCookie ? csrfCookie.split('=')[1] : null;\r\n// };\r\n\r\n// Request interceptor to add CSRF token to headers\r\n\r\n// axiosInstance.interceptors.request.use(\r\n//     (config) => {\r\n//         const csrfToken = getCsrfTokenFromCookies();\r\n//         console.log('Sending CSRF Token:', csrfToken);\r\n//         if (csrfToken) {\r\n//             config.headers['csrf-token'] = csrfToken; // Add CSRF token to headers\r\n//         }\r\n//         return config;\r\n//     },\r\n//     (error) => {\r\n//         // Handle request setup errors\r\n//         return Promise.reject(error);\r\n//     }\r\n// );\r\n\r\naxiosInstance.interceptors.response.use(\r\n    (response) => response,\r\n    async (error) => {\r\n        const originalRequest = error.config;\r\n\r\n        let message = 'خطای غیرمنتظره رخ داد.';\r\n\r\n        if (error.response) {\r\n            const { status, data } = error.response;\r\n\r\n            message = data.message || message;\r\n\r\n            switch (status) {\r\n                case 400:\r\n                    message = data.message || 'درخواست اشتباه ارسال شده است.';\r\n                    break;\r\n                case 401:\r\n                    message = data.message || 'لطفاً وارد حساب کاربری خود شوید.';\r\n                    break;\r\n                    // case 403:\r\n                    // Attempt to refresh CSRF token and retry the request\r\n                    if (!originalRequest._retry) {\r\n                        originalRequest._retry = true; // Mark request as retried\r\n                        try {\r\n                            // Fetch new CSRF token\r\n                            const csrfResponse = await axios.get('http://localhost:8080/api/csrf-token', { withCredentials: true });\r\n                            const newCsrfToken = csrfResponse.data.csrfToken;\r\n\r\n                            // Add new token to original request headers\r\n                            if (newCsrfToken) {\r\n                                originalRequest.headers['x-csrf-token'] = newCsrfToken;\r\n                            }\r\n\r\n                            // Retry the original request\r\n                            return axiosInstance(originalRequest);\r\n                        } catch (csrfError) {\r\n                            console.error('Failed to refresh CSRF token:', csrfError);\r\n                            message = 'دریافت توکن ناموفق بود. لطفاً دوباره تلاش کنید.';\r\n                        }\r\n                    } else {\r\n                        message = 'دسترسی محدود است.';\r\n                    }\r\n                    break;\r\n                case 403:\r\n                    message = data.message || '403.';\r\n                case 404:\r\n                    message = data.message || 'صفحه مورد نظر یافت نشد.';\r\n                    break;\r\n                case 409:\r\n                    message = data.message || 'تعارض در ثبت اطلاعات. لطفاً بررسی کنید.';\r\n                    break;\r\n                case 422:\r\n                    message = data.message || 'داده‌های ورودی معتبر نیستند.';\r\n                    break;\r\n                case 429:\r\n                    message = data.message || 'تعداد درخواست‌ها بیش از حد است. لطفاً بعداً تلاش کنید.';\r\n                    break;\r\n                case 500:\r\n                    message = data.message || 'خطای داخلی سرور. لطفاً بعداً دوباره تلاش کنید.';\r\n                    break;\r\n                case 502:\r\n                    message = data.message || 'درخواست شما به سرور نرسید. لطفاً دوباره تلاش کنید.';\r\n                    break;\r\n                case 503:\r\n                    message = data.message || 'سرویس در دسترس نیست. لطفاً بعداً دوباره تلاش کنید.';\r\n                    break;\r\n                default:\r\n                    message = data.message || 'خطای غیرمنتظره رخ داد.';\r\n                    break;\r\n            }\r\n        }\r\n        else if (error.request) {\r\n            message = 'خطای شبکه. لطفاً اتصال خود را بررسی کنید.';\r\n        }\r\n        else if (error.config) {\r\n            message = 'مشکلی در تنظیمات درخواست به وجود آمد. لطفاً بررسی کنید.';\r\n        }\r\n        else if (error.message) {\r\n            message = error.message;\r\n        }\r\n\r\n        console.error(message);\r\n\r\n        return Promise.reject({ message, error });\r\n    }\r\n);\r\n\r\nexport default axiosInstance;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}